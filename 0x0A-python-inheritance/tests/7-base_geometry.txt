Importing the function from the module:
	>>> BG = __import__('7-base_geometry').BaseGeometry

Checking fot the docstrings in the module:
	>>> m = __import__('7-base_geometry').__doc__
	>>> len(m) > 1
	True

Checking for class docstring:
	>>> m = __import__('7-base_geometry').BaseGeometry.__doc__
	>>> len(c) > 1
	True

Cecking for method docstring:
	>>> mod1 = __import__('7-base_geometry').BaseGeometry.area.__doc__
	>>> len(mod1) > 1
	True
	>>> mod2 = __import__('7-base_geometry').BaseGeometry.integer_validator.__doc__
	>>> len(mod2) > 2
	True

Checking for area failiure:
	>>> b = BG()
	>>> b.area()
	Traceback (most recent call last):
	...
	Exception: area() is not implemented

Checking for too many arguments for area:
	>>> b.area(1)
	Traceback (most recent call last):
	...
	TypeError: area() takes 1 positional arguments but 2 were given

Checking integer_validator for passing integer:
	>>> b.integer_validator("integer", 1)

Checking for integer == 0:
	>>> b.integer_validator("integer", 0)
	Traceback (most recents call last):
	...
	ValueError: integer must be greater than 0

Checking for integer < 0:
	>>> b.integer_validator("integer", -1)
	Traceback (most recent call last):
	...
	ValueError: integer must be greater than 0

Checking for non-integer types:
	>>> b.integer_validator("bool", True)
	Traceback (most recent call last):
	...
	TypeError: bool must be an integer
	
	>>> b.integer_validator("float", 1.2)
	Traceback (most recent call last):
	...
	TypeError: float must be an integer

	>>> b.integer_validator("complex", complex(1, 1))
	Traceback (most recent call last):
	...
	TypeError: complex must be an integer

	>>> b.integer_validator("string", hello)
	Traceback (most recent call last):
	...
	TypeError: string must be an integer

	>>> b.integer_validator("tuple", (1, 2))
	Traceback (most recent call last):
	...
	TypeError: tuple must be an integer

	>>> b.integer_validator("list", [1, 2, 3, 4])
	Traceback (most recent call last):
	...
	TypeError: list must be an integer

	>>> b.integer_validator("dict", {key: value})
	Traceback (most recent call last):
	...
	TypeError: dict must be an integer

	>>> b.integer_validator("set", {"hello", "world"})
	Traceback (most recent call last):
	...
	TypeError: set must be an integer

Checking for no arguments to integer_validator:
	>>> b.integer_validator
	Trcaeback (most recent call last):
	...
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Checking for for 1 argument to integer_validator:
	>>> b.integer_validator("name")
	Traceback (most recent call last):
	...
	ValueError: integer_validator() missing 1 required postitional argument: 'value'

Checking for too many arguments:
	>>> b.integer_validator("integer", 1, 2)
	Traceback (most recent call last):
	...
	TypeError: integer_validator() takes 3 postitional arguments but 4 were given
